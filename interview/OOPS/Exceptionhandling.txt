1. What is an exception in Java?
   - Answer: An exception is an event that disrupts the normal flow of the program's instructions.

2. How does exception handling work in Java?
   - Answer: Exception handling in Java is managed via five keywords: try, catch, throw, throws, and finally.
   - Code Example:
     ```java
     try {
         int data = 50 / 0; // may throw exception
     } catch (ArithmeticException e) {
         System.out.println(e);
     } finally {
         System.out.println("Finally block is always executed");
     }
     ```

3. What is the difference between checked and unchecked exceptions?
   - Answer: Checked exceptions are checked at compile-time, while unchecked exceptions are checked at runtime.
   - Code Example:
     ```java
     // Checked Exception
     import java.io.FileNotFoundException;
     import java.io.FileReader;

     public class CheckedExceptionExample {
         public static void main(String[] args) {
             try {
                 FileReader file = new FileReader("somefile.txt");
             } catch (FileNotFoundException e) {
                 System.out.println(e);
             }
         }
     }

     // Unchecked Exception
     public class UncheckedExceptionExample {
         public static void main(String[] args) {
             int num = 10 / 0; // This will throw ArithmeticException
         }
     }
     ```

4. Can you explain the try-catch-finally block in Java?
   - Answer: The try block contains code that might throw an exception, catch block handles the exception, and finally block executes code after try-catch regardless of whether an exception was thrown.
   - Code Example:
     ```java
     try {
         int data = 50 / 0;
     } catch (ArithmeticException e) {
         System.out.println(e);
     } finally {
         System.out.println("Finally block is always executed");
     }
     ```

5. What is the purpose of the throw and throws keywords in Java?
   - Answer: The throw keyword is used to explicitly throw an exception, while the throws keyword is used to declare an exception.
   - Code Example:
     ```java
     public class ThrowExample {
         static void checkAge(int age) {
             if (age < 18) {
                 throw new ArithmeticException("Not eligible to vote");
             } else {
                 System.out.println("Eligible to vote");
             }
         }

         public static void main(String[] args) {
             checkAge(15);
         }
     }

     public class ThrowsExample {
         void myMethod() throws IOException {
             throw new IOException("File not found");
         }
     }
     ```

6. How do you create a custom exception in Java?
   - Answer: By extending the Exception class or any of its subclasses.
   - Code Example:
     ```java
     class CustomException extends Exception {
         CustomException(String message) {
             super(message);
         }
     }

     public class TestCustomException {
         public static void main(String[] args) {
             try {
                 throw new CustomException("This is a custom exception");
             } catch (CustomException e) {
                 System.out.println(e.getMessage());
             }
         }
     }
     ```

7. What is the difference between the Exception and Error classes in Java?
   - Answer: Exception is used for conditions that a program might want to catch, while Error is used for serious problems that a reasonable application should not try to catch.
   - Code Example:
     ```java
     // Example of Exception
     public class ExceptionExample {
         public static void main(String[] args) {
             try {
                 int data = 50 / 0;
             } catch (ArithmeticException e) {
                 System.out.println(e);
             }
         }
     }

     // Example of Error
     public class ErrorExample {
         public static void main(String[] args) {
             try {
                 int[] arr = new int[Integer.MAX_VALUE];
             } catch (OutOfMemoryError e) {
                 System.out.println(e);
             }
         }
     }
     ```

8. Can you explain the concept of exception chaining in Java?
   - Answer: Exception chaining is the practice of using one exception as the cause of another.
   - Code Example:
     ```java
     public class ExceptionChainingExample {
         public static void main(String[] args) {
             try {
                 throw new Exception("Top Level Exception", new NullPointerException("Cause of the exception"));
             } catch (Exception e) {
                 System.out.println(e.getCause());
             }
         }
     }
     ```

9. What are some best practices for exception handling in Java?
   - Answer: Some best practices include catching specific exceptions, using finally blocks for cleanup, and avoiding empty catch blocks.
   - Code Example:
     ```java
     try {
         // ...existing code...
     } catch (IOException e) {
         System.out.println("IOException occurred: " + e.getMessage());
     } finally {
         // Cleanup code
     }
         import java.io.File;
import java.io.FileReader;
import java.io.IOException;

public class ExceptionHandlingExample {

    // Method that demonstrates exception handling best practices
    public void readFile(String fileName) {
        FileReader fileReader = null;

        try {
            // Trying to open the file
            File file = new File(fileName);
            fileReader = new FileReader(file);
            System.out.println("File reading started...");

            // Simulate file processing
            // If thereâ€™s an error opening the file, it will throw an IOException

        } catch (IOException e) {
            // Catch specific exception (IOException)
            System.out.println("IOException occurred: " + e.getMessage());
            e.printStackTrace();  // Log the full stack trace for debugging
        } catch (Exception e) {
            // Catch any other unexpected exceptions
            System.out.println("An unexpected error occurred: " + e.getMessage());
        } finally {
            // Cleanup resources in the finally block
            // The finally block will always run, even if an exception occurs
            try {
                if (fileReader != null) {
                    fileReader.close();
                    System.out.println("FileReader closed.");
                }
            } catch (IOException e) {
                // Handle any exception that occurs while closing the file
                System.out.println("Error closing the file: " + e.getMessage());
            }
        }
    }

    public static void main(String[] args) {
        // Instantiate the class and call the method
        ExceptionHandlingExample example = new ExceptionHandlingExample();
        example.readFile("somefile.txt");
    }
}

     ```

10. How does the multi-catch block work in Java?
    - Answer: Multi-catch block allows catching multiple exceptions in a single catch block.
    - Code Example:
      ```java
      try {
          // ...existing code...
      } catch (IOException | SQLException e) {
          System.out.println("Exception occurred: " + e.getMessage());
      }
      ```

11. What is the difference between final, finally, and finalize in Java?
    - Answer: final is a keyword used to declare constants, finally is a block used for cleanup code, and finalize is a method used for garbage collection.
    - Code Example:
      ```java
      // final keyword
      final int MAX = 100;

      // finally block
      try {
          // ...existing code...
      } finally {
          System.out.println("Finally block executed");
      }

      // finalize method
      protected void finalize() throws Throwable {
      make object null then system.gc() 
          System.out.println("Finalize method called");
      }
      ```

12. Can you explain the concept of suppressed exceptions in Java?
    - Answer: Suppressed exceptions are exceptions that are thrown but not propagated because another exception is thrown in the try-with-resources statement.
    - Code Example:
      ```java
      public class SuppressedExceptionExample {
          public static void main(String[] args) {
              try (AutoCloseableResource resource = new AutoCloseableResource()) {
                  throw new Exception("Primary Exception");
              } catch (Exception e) {
                  for (Throwable t : e.getSuppressed()) {
                      System.out.println("Suppressed: " + t);
                  }
              }
          }
      }

      class AutoCloseableResource implements AutoCloseable {
          @Override
          public void close() throws Exception {
              throw new Exception("Suppressed Exception");
          }
      }
      ```

13. How do you handle exceptions in a multi-threaded environment in Java?
    - Answer: By using try-catch blocks within the run method of the thread or using an UncaughtExceptionHandler.
    - Code Example:
      ```java
      public class MultiThreadedExceptionHandling {
          public static void main(String[] args) {
              Thread thread = new Thread(() -> {
                  try {
                      int data = 50 / 0;
                  } catch (ArithmeticException e) {
                      System.out.println(e);
                  }
              });

              thread.setUncaughtExceptionHandler((t, e) -> {
                  System.out.println("Uncaught exception: " + e);
              });

              thread.start();
          }
      }
      ```

14. What is the purpose of the try-with-resources statement in Java?
    - Answer: The try-with-resources statement ensures that each resource is closed at the end of the statement.
    - Code Example:
    import java.io.BufferedReader;
    import java.io.FileReader;
    import java.io.IOException;

    public class TryWithResourcesExample {
        public static void main(String[] args) {
            // Try-with-resources statement automatically closes the resource (BufferedReader).
            try (BufferedReader br = new BufferedReader(new FileReader("file.txt"))) {
                // Reading the first line of the file
                System.out.println(br.readLine());
            } catch (IOException e) {
                // Handling exceptions
                System.out.println("Error: " + e.getMessage());
            }
        }
    }
      ```

15. How do you log exceptions in Java?
    - Answer: By using logging frameworks like java.util.logging, Log4j, or SLF4J.
    - Code Example:
      ```java
      import java.util.logging.Logger;

      public class LoggingExample {
          private static final Logger logger = Logger.getLogger(LoggingExample.class.getName());

          public static void main(String[] args) {
              try {
                  int data = 50 / 0;
              } catch (ArithmeticException e) {
                  logger.severe("Exception occurred: " + e.getMessage());
              }
          }
      }
      ```
