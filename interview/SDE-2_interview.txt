Core Java & J2EE
üîπ Q1: What are the key differences between Java 8, Java 11, and Java 17?
// Java 8 introduced lambdas, streams, and the new date-time API, which made it easier to write functional-style code.
// Java 11 added new methods to the String class, local-variable syntax for lambda parameters, and the HTTP Client API, which simplified HTTP calls.
// Java 17 is an LTS release with features like sealed classes, pattern matching for switch, and new garbage collectors, providing more control over class hierarchies and better performance.

üîπ Q2: Explain object-oriented principles (OOP) in Java with examples.
// OOP principles: Encapsulation, Inheritance, Polymorphism, Abstraction.
// Example:
class Animal {
    private String name; // Encapsulation: hiding the internal state of the object
    public Animal(String name) {
        this.name = name;
    }
    public void makeSound() { // Polymorphism: method can be overridden by subclasses
        System.out.println("Some sound");
    }
}
class Dog extends Animal { // Inheritance: Dog inherits properties and methods from Animal
    public Dog(String name) {
        super(name);
    }
    @Override
    public void makeSound() { // Polymorphism: overriding the method in the subclass
        System.out.println("Bark");
    }
}

üîπ Q3: What is the difference between == and .equals() in Java?
// '==' checks for reference equality, meaning it checks if both references point to the same object.
// .equals() checks for value equality, meaning it checks if the values of the objects are the same.
// Example:
String a = new String("hello");
String b = new String("hello");
System.out.println(a == b); // false, because they are different objects
System.out.println(a.equals(b)); // true, because their values are the same

üîπ Q4: How does Garbage Collection work in Java? Explain different GC algorithms.
// GC automatically deallocates memory by identifying and disposing of objects that are no longer in use.
// Algorithms: 
// - Serial GC: single-threaded, suitable for small applications.
// - Parallel GC: multi-threaded, suitable for medium-sized applications.
// - CMS (Concurrent Mark-Sweep) GC: low pause times, suitable for applications requiring responsiveness.
// - G1 (Garbage-First) GC: balances between throughput and low pause times, suitable for large applications.
// Example:
System.gc(); // Suggests JVM to run GC

üîπ Q5: What are checked and unchecked exceptions?
// Checked exceptions are checked at compile-time, meaning the compiler ensures they are handled or declared.
// Unchecked exceptions are checked at runtime, meaning they can occur during the execution of the program and are not required to be handled.
// Example:
try {
    throw new IOException(); // Checked exception
} catch (IOException e) {
    e.printStackTrace();
}
throw new RuntimeException(); // Unchecked exception

2Ô∏è‚É£ Multithreading & Concurrency
üîπ Q6: How does Java handle multithreading? Explain Thread, Runnable, and Callable.
// Thread is a class that represents a thread of execution.
// Runnable is an interface that should be implemented by any class whose instances are intended to be executed by a thread.
// Callable is similar to Runnable but can return a result and throw a checked exception.
// Example:
class MyRunnable implements Runnable {
    public void run() {
        System.out.println("Runnable running");
    }
}
Thread t = new Thread(new MyRunnable());
t.start();

üîπ Q7: What are synchronized blocks and ReentrantLock?
// Synchronized blocks ensure mutual exclusion, meaning only one thread can execute the block at a time.
// ReentrantLock provides more control over locking, such as the ability to interrupt a thread waiting for a lock or to try to acquire a lock without waiting.
// Example:
synchronized(this) {
    // critical section
}
ReentrantLock lock = new ReentrantLock();
lock.lock();
try {
    // critical section
} finally {
    lock.unlock();
}

üîπ Q8: How does Thread Pooling work in Java?
// Thread pooling reuses a fixed number of threads to perform multiple tasks, reducing the overhead of creating and destroying threads.
// Example:
ExecutorService executor = Executors.newFixedThreadPool(10);
executor.submit(() -> System.out.println("Task executed"));

üîπ Q9: What are deadlock, livelock, and starvation? How to prevent them?
// Deadlock: two threads waiting on each other, causing both to be blocked indefinitely.
// Livelock: threads keep changing state in response to each other, but none make progress.
// Starvation: a thread never gets CPU time because other threads are constantly being executed.
// Prevention: Avoid nested locks, use timeout for lock acquisition, use fair scheduling to ensure all threads get a chance to execute.

üîπ Q10: Explain CompletableFuture and its advantages over traditional multithreading.
// CompletableFuture allows non-blocking asynchronous programming, meaning tasks can be executed asynchronously without blocking the main thread.
// It provides methods to handle the result of the computation and to chain multiple asynchronous tasks together.
// Example:
CompletableFuture.supplyAsync(() -> "Hello")
    .thenApply(result -> result + " World")
    .thenAccept(System.out::println);

3Ô∏è‚É£ Spring Framework (Spring Boot, Struts)
üîπ Q11: What are the key differences between Spring Boot and Spring Framework?
// Spring Boot simplifies Spring application setup with auto-configuration, embedded servers, and opinionated defaults, making it easier to create stand-alone, production-grade Spring applications.
// Spring Framework provides a comprehensive programming and configuration model for modern Java-based enterprise applications, but requires more configuration and setup.

üîπ Q12: How does Spring Dependency Injection work?
// Dependency Injection (DI) injects dependencies into a class, rather than the class creating them itself, promoting loose coupling and easier testing.
// DI can be done via constructor injection, setter injection, or field injection.
// Example:
@Autowired
private MyService myService;

üîπ Q13: What is the difference between @Component, @Service, and @Repository?
// @Component is a generic stereotype for any Spring-managed component.
// @Service is a specialization of @Component for service layer classes.
// @Repository is a specialization of @Component for DAO (Data Access Object) classes, providing additional features for exception translation.

üîπ Q14: Explain the Spring Bean lifecycle and scopes (singleton, prototype).
// Lifecycle: instantiation, dependency injection, initialization, destruction.
// Scopes: 
// - Singleton (default): a single instance per Spring container.
// - Prototype: a new instance every time it is requested.
// - Request: a single instance per HTTP request.
// - Session: a single instance per HTTP session.
// - Global session: a single instance per global HTTP session.

üîπ Q15: What is Spring Security and how does it handle authentication/authorization?
// Spring Security provides authentication and authorization mechanisms to secure Spring applications.
// It handles authentication by verifying user credentials and authorization by restricting access to resources based on user roles and permissions.
// Example:
@EnableWebSecurity
public class SecurityConfig extends WebSecurityConfigurerAdapter {
    @Override
    protected void configure(HttpSecurity http) throws Exception {
        http.authorizeRequests()
            .antMatchers("/admin").hasRole("ADMIN")
            .antMatchers("/user").hasRole("USER")
            .and().formLogin();
    }
}

4Ô∏è‚É£ RESTful APIs & WebSockets
üîπ Q16: What are RESTful APIs? How do you implement them in Spring Boot?
// RESTful APIs use HTTP methods for CRUD operations and follow REST principles, such as statelessness and resource-based URLs.
// Example:
@RestController
@RequestMapping("/api")
public class MyController {
    @GetMapping("/resource")
    public ResponseEntity<String> getResource() {
        return ResponseEntity.ok("Resource");
    }
}

üîπ Q17: What are HTTP methods (GET, POST, PUT, DELETE, PATCH) used for?
// GET: retrieve data from the server.
// POST: create new resources on the server.
// PUT: update existing resources on the server.
// DELETE: delete resources from the server.
// PATCH: partially update existing resources on the server.

üîπ Q18: What is @RestController in Spring Boot? How does it work?
// @RestController combines @Controller and @ResponseBody to handle REST requests, meaning it returns JSON or XML responses directly from the controller methods.

üîπ Q19: How do you handle exception handling in REST APIs (@ControllerAdvice)?
// @ControllerAdvice handles exceptions globally, allowing you to define exception handling logic in a single place.
// Example:
@ControllerAdvice
public class GlobalExceptionHandler {
    @ExceptionHandler(Exception.class)
    public ResponseEntity<String> handleException(Exception e) {
        return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body(e.getMessage());
    }
}

üîπ Q20: What are WebSockets, and how do you implement them in Spring Boot?
// WebSockets provide full-duplex communication channels over a single TCP connection, allowing real-time communication between the client and server.
// Example:
@Configuration
@EnableWebSocketMessageBroker
public class WebSocketConfig implements WebSocketMessageBrokerConfigurer {
    @Override
    public void registerStompEndpoints(StompEndpointRegistry registry) {
        registry.addEndpoint("/ws").withSockJS();
    }
}

5Ô∏è‚É£ Databases: SQL & NoSQL
üîπ Q21: What is the difference between SQL and NoSQL databases?
// SQL databases are structured and relational, using tables to store data and SQL for querying.
// NoSQL databases are unstructured and non-relational, using various data models such as key-value, document, column-family, and graph.

üîπ Q22: How do you optimize MySQL queries for better performance?
// Use indexing to speed up data retrieval, optimize queries to reduce complexity, avoid using SELECT * to reduce the amount of data transferred, and use query caching to store the results of frequently executed queries.

üîπ Q23: What is Redis, and how is it different from a traditional database?
// Redis is an in-memory data structure store, used as a database, cache, and message broker. It is different from traditional databases because it stores data in memory, providing faster read and write operations.

üîπ Q24: How does JPA/Hibernate caching work? What are first-level and second-level caches?
// First-level cache: session-level, meaning it is associated with the Hibernate session and is enabled by default.
// Second-level cache: session factory-level, meaning it is shared across sessions and must be explicitly enabled.

üîπ Q25: Explain ACID properties in databases.
// Atomicity: ensures that all operations within a transaction are completed successfully or none are.
// Consistency: ensures that a transaction brings the database from one valid state to another.
// Isolation: ensures that transactions are executed in isolation from one another.
// Durability: ensures that the results of a transaction are permanently stored in the database.

6Ô∏è‚É£ Message Queues (RabbitMQ & Kafka)
üîπ Q26: What is RabbitMQ, and how does it handle messaging?
// RabbitMQ is a message broker that uses AMQP (Advanced Message Queuing Protocol) for messaging, allowing applications to communicate asynchronously by sending and receiving messages through queues.

üîπ Q27: How does Kafka differ from RabbitMQ?
// Kafka is a distributed streaming platform that uses a publish-subscribe model for messaging, providing high throughput and scalability.
// RabbitMQ is a message broker that uses a point-to-point or publish-subscribe model for messaging, providing more features for message routing and delivery guarantees.

üîπ Q28: Explain Kafka's producer-consumer architecture.
// Producers send messages to topics, which are divided into partitions. Consumers read messages from topics, with each consumer group having its own offset, allowing multiple consumers to read from the same topic independently.

üîπ Q29: What are Kafka partitions, and how do they improve performance?
// Partitions allow parallel processing of messages by dividing a topic into multiple partitions, with each partition being processed by a separate consumer, improving throughput and scalability.

üîπ Q30: How do you ensure message delivery reliability in Kafka?
// Use acknowledgments to ensure messages are received, replication to store multiple copies of messages, and retries to handle transient failures.

7Ô∏è‚É£ Cloud & CI/CD (AWS, Azure, GCP)
üîπ Q31: What is CI/CD? How do you implement it in a Java project?
// CI/CD automates integration and deployment, allowing code changes to be automatically built, tested, and deployed to production.
// Example: Jenkins pipeline for Java project.
pipeline {
    agent any
    stages {
        stage('Build') {
            steps {
                sh 'mvn clean package'
            }
        }
        stage('Test') {
            steps {
                sh 'mvn test'
            }
        }
        stage('Deploy') {
            steps {
                sh 'scp target/myapp.jar user@server:/path/to/deploy'
            }
        }
    }
}

üîπ Q32: What are Docker and Kubernetes, and how are they used in deployment?
// Docker containers package applications and their dependencies, providing a consistent runtime environment.
// Kubernetes orchestrates containers, managing their deployment, scaling, and operation.

üîπ Q33: What is the difference between monolithic and microservices architectures?
// Monolithic: single unit, meaning all components are tightly coupled and deployed together.
// Microservices: small, independent services, meaning each service is loosely coupled and can be developed, deployed, and scaled independently.

üîπ Q34: How does AWS S3 work, and how can you integrate it with a Java application?
// AWS S3 stores objects (files) in buckets, providing scalable storage with high availability and durability.
// Integrate using AWS SDK:
AmazonS3 s3Client = AmazonS3ClientBuilder.standard().build();
s3Client.putObject(new PutObjectRequest("my-bucket", "my-key", new File("my-file")));

üîπ Q35: How do you handle logging and monitoring in cloud-based Java applications?
// Use tools like ELK stack (Elasticsearch, Logstash, Kibana) for logging and visualization, Prometheus for monitoring and alerting, and Grafana for dashboarding.

8Ô∏è‚É£ Git & Version Control
üîπ Q36: How does Git work, and what are its main commands (commit, push, pull)?
// Git tracks changes to files, allowing multiple developers to collaborate on a project.
// Main commands: 
// - commit: save changes to the local repository.
// - push: upload changes to the remote repository.
// - pull: download changes from the remote repository.

üîπ Q37: What is the difference between Git Merge and Git Rebase?
// Merge: combines branches, creating a new commit that includes changes from both branches.
// Rebase: reapplies commits on top of another base, creating a linear history.

üîπ Q38: What are Git branches, tags, and stashes?
// Branches: parallel versions of the repository, allowing multiple lines of development.
// Tags: snapshots of the repository at a specific point in time, often used for releases.
// Stashes: temporary storage for changes that are not ready to be committed.

üîπ Q39: What is the use of .gitignore in a project?
// .gitignore excludes files from being tracked by Git, preventing them from being committed to the repository.

üîπ Q40: How do you resolve Git merge conflicts?
// Manually edit conflicting files to resolve differences, then commit the resolved changes.

9Ô∏è‚É£ Data Structures & Algorithms
üîπ Q41: What are the differences between ArrayList and LinkedList?
// ArrayList: dynamic array, providing fast random access but slow insertions and deletions.
// LinkedList: doubly linked list, providing fast insertions and deletions but slow random access.

üîπ Q42: How does HashMap work internally in Java?
// HashMap uses an array of buckets, with each bucket being a linked list or tree. The hash code of the key determines the bucket, and the key-value pairs are stored in the bucket.

üîπ Q43: Explain the time complexity of different sorting algorithms.
// QuickSort: O(n log n) on average, O(n^2) in the worst case.
// MergeSort: O(n log n) in all cases.
// BubbleSort: O(n^2) in all cases.

üîπ Q44: Implement a binary search in Java.
// Example:
int binarySearch(int[] arr, int key) {
    int low = 0, high = arr.length - 1;
    while (low <= high) {
        int mid = (low + high) / 2;
        if (arr[mid] < key) low = mid + 1;
        else if (arr[mid] > key) high = mid - 1;
        else return mid;
    }
    return -1;
}

üîπ Q45: What is the difference between Breadth-First Search (BFS) and Depth-First Search (DFS)?
// BFS: level-order traversal, uses a queue to explore nodes level by level.
// DFS: depth-order traversal, uses a stack (or recursion) to explore nodes as deep as possible before backtracking.

üîπ Behavioral & System Design Questions
üîπ Q46: Have you worked in a financial services domain before? How was your experience?
// Answer based on personal experience.

üîπ Q47: How do you handle high-load transactional systems?
// Use load balancing to distribute traffic, caching to reduce database load, and database optimization techniques such as indexing and query optimization.

üîπ Q48: How would you design a highly scalable notification system?
// Use message queues to decouple components, microservices to handle different types of notifications, and distributed databases to store notification data.

üîπ Q49: Describe a challenging backend issue you solved and how.
// Answer based on personal experience.

üîπ Q50: How do you ensure high availability and fault tolerance in your system?
// Use redundancy to eliminate single points of failure, failover mechanisms to switch to backup systems, and regular backups to recover from data loss.

