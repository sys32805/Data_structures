Java Interview Questions for 3 Years of Experience

1. What is the difference between HashMap and Hashtable in Java?
   Answer: HashMap is not synchronized and allows null keys and values, while Hashtable is synchronized and does not allow null keys or values.

2. Explain the concept of Java Collections Framework.
   Answer: The Java Collections Framework provides a set of interfaces and classes to handle collections of objects. It includes classes like ArrayList, LinkedList, HashSet, and HashMap, and interfaces like List, Set, and Map.

3. What is the purpose of the `final` keyword in Java?
   Answer: The `final` keyword can be used with variables, methods, and classes. A final variable's value cannot be changed, a final method cannot be overridden, and a final class cannot be subclassed.

4. How does the `equals()` method differ from the `==` operator in Java?
   Answer: The `equals()` method checks for value equality, while the `==` operator checks for reference equality.

5. What is the significance of the `hashCode()` method in Java?
   Answer: The `hashCode()` method returns an integer value, generated by a hashing algorithm. It is used in conjunction with the `equals()` method to determine the equality of objects and is crucial for the performance of hash-based collections like HashMap.

6. Explain the concept of exception handling in Java.
   Answer: Exception handling in Java is a mechanism to handle runtime errors, allowing the normal flow of the application to be maintained. It is implemented using try, catch, finally, and throw keywords.

7. What is the difference between `ArrayList` and `LinkedList` in Java?
   Answer: ArrayList is based on a dynamic array and provides fast random access, while LinkedList is based on a doubly linked list and provides better performance for insertions and deletions.

8. How does the `synchronized` keyword work in Java?
   Answer: The `synchronized` keyword is used to control access to a method or block of code by multiple threads. It ensures that only one thread can execute the synchronized code at a time, preventing thread interference and memory consistency errors.

9. What is the purpose of the `transient` keyword in Java?
   Answer: The `transient` keyword is used to indicate that a field should not be serialized. When an object is serialized, transient fields are not included in the serialized representation.

10. Explain the concept of garbage collection in Java.
    Answer: Garbage collection in Java is the process of automatically reclaiming memory by identifying and disposing of objects that are no longer in use. It helps in managing memory and preventing memory leaks.

11. What is the difference between `String`, `StringBuilder`, and `StringBuffer` in Java?
    Answer: `String` is immutable, meaning its value cannot be changed once created. `StringBuilder` is mutable and not synchronized, making it faster but not thread-safe. `StringBuffer` is mutable and synchronized, making it thread-safe but slower than `StringBuilder`.

12. Explain the concept of method overloading and method overriding in Java.
    Answer: Method overloading allows a class to have multiple methods with the same name but different parameters. Method overriding allows a subclass to provide a specific implementation of a method already defined in its superclass.

13. What is the use of the `super` keyword in Java?
    Answer: The `super` keyword is used to refer to the immediate parent class object. It can be used to access parent class methods, constructors, and variables.

14. What is a Java Bean?
    Answer: A Java Bean is a reusable software component that follows certain conventions, including having a no-argument constructor, providing getter and setter methods for accessing properties, and being serializable.

15. Explain the concept of a thread pool in Java.
    Answer: A thread pool is a collection of pre-instantiated reusable threads that can be used to execute tasks. It helps in managing a large number of short-lived tasks by reusing existing threads instead of creating new ones.

16. What is the difference between `wait()` and `sleep()` methods in Java?
    Answer: The `wait()` method releases the lock on an object and waits until another thread invokes `notify()` or `notifyAll()` on that object. The `sleep()` method pauses the execution of the current thread for a specified period without releasing the lock.

17. Explain the concept of reflection in Java.
    Answer: Reflection is a feature in Java that allows a program to examine and modify the behavior of an object at runtime. It is used to inspect classes, interfaces, fields, and methods at runtime without knowing their names at compile time.

18. What is the purpose of the `volatile` keyword in Java?
    Answer: The `volatile` keyword is used to indicate that a variable's value may be changed by different threads. It ensures that the value of the variable is always read from and written to the main memory, providing visibility guarantees.

19. Explain the concept of a singleton class in Java.
    Answer: A singleton class is a class that allows only one instance to be created. It provides a global point of access to that instance. This is typically achieved by making the constructor private and providing a static method to get the instance.

20. What is the difference between `Comparable` and `Comparator` interfaces in Java?
    Answer: The `Comparable` interface is used to define the natural ordering of objects by implementing the `compareTo()` method. The `Comparator` interface is used to define custom ordering by implementing the `compare()` method. A class can implement `Comparable` to define its natural order, while `Comparator` can be used to define multiple custom orders.

21. What is the difference between `abstract` class and `interface` in Java?
    Answer: An `abstract` class can have both abstract and concrete methods, while an `interface` can only have abstract methods (until Java 8, which introduced default and static methods in interfaces). A class can implement multiple interfaces but can only extend one abstract class.

22. Explain the concept of `try-with-resources` in Java.
    Answer: `try-with-resources` is a try statement that declares one or more resources. A resource is an object that must be closed after the program is finished with it. The `try-with-resources` statement ensures that each resource is closed at the end of the statement.

23. What is the purpose of the `default` keyword in Java interfaces?
    Answer: The `default` keyword allows you to define default methods in interfaces. These methods have a body and provide a default implementation that can be overridden by implementing classes.

24. Explain the concept of lambda expressions in Java.
    Answer: Lambda expressions are a feature in Java that allows you to write anonymous methods. They provide a clear and concise way to represent one method interface using an expression. Lambda expressions are used primarily to define the inline implementation of a functional interface.

25. What is the difference between `Serializable` and `Externalizable` interfaces in Java?
    Answer: The `Serializable` interface is a marker interface that enables the default serialization mechanism of Java. The `Externalizable` interface provides control over the serialization process by implementing the `writeExternal` and `readExternal` methods.

26. Explain the concept of functional interfaces in Java.
    Answer: A functional interface is an interface that contains exactly one abstract method. They can have multiple default or static methods. Functional interfaces are used as the basis for lambda expressions and method references.

27. What is the purpose of the `Optional` class in Java?
    Answer: The `Optional` class is a container object used to contain not-null objects. It is used to represent optional values that may or may not be present, helping to avoid null pointer exceptions.

28. Explain the concept of streams in Java.
    Answer: Streams in Java provide a modern way to process sequences of elements. They support functional-style operations such as map, filter, and reduce, allowing for efficient and concise data processing.

29. What is the difference between `Callable` and `Runnable` interfaces in Java?
    Answer: The `Runnable` interface represents a task that can be executed by a thread and does not return a result. The `Callable` interface is similar but can return a result and throw a checked exception.

30. Explain the concept of method references in Java.
    Answer: Method references are a shorthand notation of a lambda expression to call a method. They allow you to refer to methods directly by their names using the `::` operator. Method references can be used to refer to static methods, instance methods, or constructors.
